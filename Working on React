import { useState, useEffect } from "react";

const Todo = () => {
    const [todos, setTodos] = useState([]);
    const [newDescription, setNewDescription] = useState('');
    const [editingId, setEditingId] = useState(null);
    const [editDescription, setEditDescription] = useState('');

    const baseUrl = 'http://127.0.0.1:5000';

    const fetchTodos = async () =>  {
        try {
            const response = await fetch(`${baseUrl}/todos`, {
                method: 'GET',
                headers: {"Content-Type": "application/json"}
            })
            const data = await response.json();
            setTodos(data);
            console.log(data);
        } catch (e) {
            console.log('Error: ', e);
        }
    }
    useEffect(() => {
        fetchTodos();
    }, []);

    const addTodo = async () => {
        try {
            const response = await fetch(`${baseUrl}/todos/add`, {
                method: 'POST',
                headers: {'Content-Type': 'application/json'},
                body: JSON.stringify({"description": newDescription})
            });
            const data = await response.json();
            setTodos([...todos, data]);
            setNewDescription("");
        } catch(e) {
            console.log("Error: ", e);
        }
    }

    const deleteTodo = async (id) => {
        try {
            const response = await fetch(`${baseUrl}/todos/delete/${id}`, {
                method: 'DELETE',
                headers: {"Content-Type": "application/json"},
            });
            setTodos(todos.filter((todo) => todo.tid !== id));
        } catch(e) {
            console.log('Error: ', e);
        }
    }

    const updateTodo = async (id) => {
        try {
            const response = await fetch(`${baseUrl}/todos/update/${id}`, {
                method: 'PUT',
                headers: {"Content-Type": "application/json"},
                body: JSON.stringify({"description": editDescription})
            });
            const data = await response.json();
            setTodos(todos.map((todo) => todo.tid === id ? data : todo));
            setEditDescription("");
            setEditingId(null);
        } catch(e) {
            console.log('Error: ', e);
        }
    }

    return (
        <div>
            <div>
                <input 
                    type='text'
                    value={newDescription}
                    placeholder='Enter New Todo'
                    onChange={(e) => setNewDescription(e.target.value)}
                />
                <button onClick={addTodo}>
                    Add Todo
                </button>
            </div>
            <ul>
                {
                    todos.map((todo) => (
                        <li key={todo.tid}>
                            {
                                editingId === todo.tid ? (
                                    <div>
                                        <input 
                                            type="text"
                                            value={editDescription}
                                            onChange={(e) => setEditDescription(e.target.value)}
                                        />
                                        <button onClick={() => updateTodo(todo.tid)}>Save</button>
                                        <button onClick={() => setEditingId(null)}>Cancel</button>
                                    </div>
                                ) : (
                                    <div>
                                        <span>{todo.description}</span>
                                        <button onClick={() => {
                                            setEditingId(todo.tid);
                                            setEditDescription(todo.description);
                                        }}>Update</button>
                                        <button onClick={() => deleteTodo(todo.tid)}>Delete</button>
                                    </div>
                                )
                            }
                        </li>
                    ))
                }
            </ul>
        </div>
    );
}

export default Todo;




import { useState } from "react";

const TicTacToe = () => {
    const [board, setBoard] = useState([]);
    const [player, setPlayer] = useState('X');
    const [size, setSize] = useState(0);

    const baseUrl = 'http://127.0.0.1:5000';

    const makeMove = async (index) => {
        try {
            const response = await fetch(`${baseUrl}/move`, {
                method: "POST",
                headers: {
                    "Content-Type": "application/json",
                },
                body: JSON.stringify({ position: index, size: size }),
            });
            const data = await response.json();
            setBoard(data.board);
            setPlayer(data.player);
            if(data.message === 'Won')
                alert(data.winner + ' Wins');
            if(data.message === 'Tie')
                alert('It is a tie');
        } catch(e) {
            console.log('Error: ', e);
        }
    }

    return (
        <div>
            <h1>Tic-Tac-Toe</h1>
            {
                board.length > 0 ?
                (
                    <div style={{ display: "grid", gridTemplateColumns: `repeat(${size}, 100px)`, gap: "10px" }}>
                        {
                            board.map((cell, index) => (
                                <button
                                    key={index}
                                    onClick={() => makeMove(index)}
                                    style={{ width: "100px", height: "100px", fontSize: "24px" }}
                                >{cell}
                                </button>
                            ))
                        }
                        <h2>Current Player: {player}</h2>
                    </div>
                ):(
                    <div>
                        <input 
                            type='number'
                            placeholder="Enter size of board"
                            value={size}
                            onChange={e => setSize(Number(e.target.value))}
                        />
                        <button onClick={() => {
                            const temp = Array(size * size).fill("");
                            setBoard(temp);
                        }
                        }>Set Size</button>
                    </div>
                )
            }
        </div>
    );
}

export default TicTacToe;




import { useState, useEffect } from "react";
import { useNavigate } from 'react-router-dom';

const Blog = () => {
    const [blogs, setBlogs] = useState([]);
    const [title, setTitle] = useState('');
    const [description, setDescription] = useState('');
    const navigate = useNavigate();

    const baseUrl = 'http://127.0.0.1:5000'
    const fetchBlogs = async () => {
        try {
            const response = await fetch(`${baseUrl}/blogs/get_all`, {
                method: 'GET',
                headers: {'Content-Type': 'application/json'},
            });
            const data = await response.json()
            setBlogs(data['Blogs'])
        } catch (e) {
            console.log('Exception: ', e);
        }
    }
    const addBlog = async () => {
        try {
            const response = await fetch(`${baseUrl}/blogs/add`, {
                method: 'POST',
                headers: {'Content-Type': 'application/json'},
                body: JSON.stringify({'b_title': title, 'b_description': description})
            });
            const data = await response.json();
            console.log(data['Blog Added']);
            setBlogs([...blogs, data['Blog Added']])
            setTitle('');
            setDescription('');
        } catch(e) {
            console.log('Exception: ', e);
        } 
    }
    const deleteBlog = async (id) => {
        try {
            await fetch(`${baseUrl}/blogs/delete/${id}`, {
                method: 'DELETE',
                headers: {'Content-Type': 'application/json'},
            });
            setBlogs(blogs.filter((blog) => blog.BlogID !== id));
        } catch (e) {
            console.log('Exception: ', e);
        }
    }

    useEffect(() => {
        fetchBlogs()
    }, []);


    return (
        <div>
            <div>
                <input 
                    type='text'
                    placeholder="Enter Blog Title"
                    value={title}
                    onChange={(e) => setTitle(e.target.value)}
                />
                <input 
                    type='text'
                    placeholder="Enter Blog Description"
                    value={description}
                    onChange={(e) => setDescription(e.target.value)}
                />
                <button onClick={addBlog}>Add Blog</button>
            </div>
            <div>
                <h3>Blogs</h3>
                <ul>
                    {
                        blogs.map((blog) => (
                            <li key={blog['BlogID']}>
                                <div>
                                    <span>{blog['Title']}</span>
                                    <button onClick={() => deleteBlog(blog['BlogID'])}>Delete</button>
                                    <button onClick={() => {navigate('/details', { state: blog });}}>View</button>
                                </div>
                            </li>
                        ))
                    }
                </ul>
            </div>
        </div>
    )
}

export default Blog;



import { useLocation } from 'react-router-dom';

const BlogDetailsPage = () => {
    const location = useLocation();
    const blog = location.state;

    return (
        <div>
            <p>Blog ID: {blog.BlogID}</p>
            <h1>{blog.Title}</h1>
            <p>{blog.Description}</p>
        </div>
    )
}

export default BlogDetailsPage





import { useState } from "react";

const Practise = () => {
    const [file, setFile] = useState(null);

    const handleUpload = async () => {
        if(file === null)
            alert('No Image File Found');
        const formData = new FormData();
        formData.append('file', file);
        const baseUrl = 'http://127.0.0.1:5000';
        try {
            await fetch(`${baseUrl}/images/upload`, {
                method: 'POST',
                body: formData
            });
            alert('Image Uploaded Successfully');
        } catch(e) {
            console.log('Error: ', e);
        }
    }

    return (
        <div>
            <input type='file' onChange={(e) => setFile(e.target.files[0])} />
            <button onClick={handleUpload}>Upload</button>
        </div>
    );
}

export default Practise;


import { useState } from "react";

const ShortenUrl = () => {
    const [originalUrl, setOriginalUrl] = useState('');
    const [shortUrl, setShortUrl] = useState('');

    const baseUrl = 'http://127.0.0.1:5000';

    const handleShorten = async () => {
        try {
            const response = await fetch(`${baseUrl}/urls/shorten`, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({originalUrl: originalUrl})
            });
            const data = await response.json()
            setShortUrl(`${baseUrl}/${data['short_url']}`);
        } catch(e) {
            console.log('Error: ', e);
        }
    }

    return (
        <div>
            <input 
                type='text'
                placeholder="Enter original url"
                value={originalUrl}
                onChange={(e) => setOriginalUrl(e.target.value)}
            />
            <button onClick={handleShorten}>Shorten URL</button>
            {
                shortUrl && (
                    <div>
                        <h3>Shortened URL:</h3>
                        <a href={shortUrl} target="_blank" rel="noopener noreferrer">
                            {shortUrl}
                        </a>
                    </div>
                )
            }
        </div>
    );
}

export default ShortenUrl;



import { useEffect, useState } from "react";

const Author = () => {
    const [authors, setAuthors] = useState([]);
    const [newAuthorName, setNewAuthorName] = useState('');
    const [newAuthorAge, setNewAuthorAge] = useState('');

    const baseUrl = 'http://127.0.0.1:5000';

    const addAuthor = async () => {
        try {
            const response = await fetch(`${baseUrl}/authors/add`, {
                method: 'POST',
                headers: {"Content-Type": "application/json"},
                body: JSON.stringify({'author': {'a_name': newAuthorName, 'a_age': newAuthorAge}})
            });
            const data = await response.json();
            console.log(data);
            setAuthors([...authors, data['author']]);
            setNewAuthorName(data['author']['a_name'])
            setNewAuthorAge(data['author']['a_age'])
        } catch(e) {
            console.log('Error: ', e);
        }
    }

    const fetchAuthors = async () => {
        try {
            const response = await fetch(`${baseUrl}/authors/get_all`, {
                method: 'GET',
                headers: {'Content-Type': 'application/json'}
            });
            const data = await response.json();
            console.log(data);
            setAuthors(data);
        } catch(e) {
            console.log('Error: ', e);
        }
    }

    const deleteAuthor = async (a_id) => {
        try {
            await fetch(`${baseUrl}/authors/delete/${a_id}`, {
                method: 'DELETE',
                headers: {'Content-Type': 'application/json'}
            });
            setAuthors(authors.filter((author) => author.a_id !== a_id));
        } catch(e) {
            console.log('Error: ', e);
        }
    }

    useEffect(() => {
        fetchAuthors();
    }, []);

    return (
        <div>
            <div>
                <input 
                    type='text'
                    placeholder="Enter author name"
                    value={newAuthorName}
                    onChange={(e) => setNewAuthorName(e.target.value)}
                />
                <input 
                    type='number'
                    placeholder="Enter author age"
                    value={newAuthorAge}
                    onChange={(e) => setNewAuthorAge(e.target.value)}
                />
                <button onClick={addAuthor}>Add Author</button>
            </div>
            <div>
                <ul>
                    {
                        authors.map((author) => (
                            <li key={author['a_id']}>
                                <div>
                                    <span>{author['a_name']}</span>
                                    <button onClick={() => deleteAuthor(author['a_id'])}>Delete</button>
                                </div>
                            </li>
                        ))
                    }
                </ul>
            </div>
        </div>
    );
}

export default Author;



import { useEffect, useState } from "react";

const Question = () => {
    const [questions, setQuestions] = useState([]);
    const [editQuestion, setEditQuestion] = useState(null);
    const [description, setDescription] = useState('');
    const [marks, setMarks] = useState(0);

    const baseUrl = 'http://127.0.0.1:5000'
    const fetchQuestions = async () => {
        try {
            const response = await fetch(`${baseUrl}/questions/get_all`, {
                method: 'GET',
                headers: {'Content-Type': 'application/json'}
            });
            const data = await response.json();
            setQuestions(data);
            console.log(data);
        } catch(e) {
            console.log('Error: ', e);
        }
    }
    const addQuestion = async () => {
        try {
            const response = await fetch(`${baseUrl}/questions/add`, {
                method: 'POST',
                headers: {'Content-Type': 'application/json'},
                body: JSON.stringify({'question': {'q_description': description, 'q_marks': marks}})
            });
            const data = await response.json();
            setQuestions([...questions, data['question']]);
        } catch(e) {
            console.log('Error: ', e);
        }
    }

    const deleteQuestion = async (id) => {
        try {
            const response = await fetch(`${baseUrl}/questions/delete/${id}`, {
                method: 'DELETE',
                headers: {'Content-Type': 'application/json'},
            });
            setQuestions(questions.filter((question) => question.q_id !== id));
        } catch(e) {
            console.log('Error: ', e);
        }
    }

    const updateQuestion = async (id) => {
        try {
            const response = await fetch(`${baseUrl}/questions/update/${id}`, {
                method: 'PUT',
                headers: {'Content-Type': 'application/json'},
                body: JSON.stringify({'question': {'q_description': description, 'q_marks': marks}})
            });
            const data = await response.json();
            const question_data = data['question'];
            setQuestions(questions.map((question) => question.q_id === id ? question_data : question));
            setDescription('');
            setMarks(0);
            setEditQuestion(null);
        } catch (e) {
            console.log('Exception: ', e);
        }
    }

    useEffect(() => {
        fetchQuestions();
    }, []);

    return (
        <>
            <div>
                <input 
                    type='text'
                    value={description}
                    placeholder='Enter Question Description'
                    onChange={e => setDescription(e.target.value)}
                />
                <input 
                    type='number'
                    value={marks}
                    placeholder='Enter Question Marks'
                    onChange={e => setMarks(e.target.value)}
                />
                <button onClick={addQuestion}>Add Question</button>
            </div>
            {
                <div>
                    <ul>
                        {
                            questions.map((question) => (
                                <li key={question.q_id}>
                                    {
                                        editQuestion === question.q_id ? (
                                            <div>
                                                <input 
                                                    type='text'
                                                    value={description}
                                                    onChange={e => setDescription(e.target.value)}
                                                />
                                                <input 
                                                    type='number'
                                                    value={marks}
                                                    onChange={e => setMarks(e.target.value)}
                                                />
                                                <button onClick={() => updateQuestion(question.q_id)}>Save</button>
                                                <button onClick={() => setEditQuestion(null)}>Cancel</button>
                                            </div>
                                        ) : (
                                            <div>
                                                <span>{question.q_description}</span>
                                                <button onClick={() => {
                                                    setEditQuestion(question.q_id);
                                                    setDescription(question.q_description);
                                                }}>Update</button>
                                                <button onClick={() => deleteQuestion(question.q_id)}>Delete</button>
                                            </div>
                                        )
                                    }
                                </li>
                            ))
                        }
                    </ul>
                </div>
            }
        </>
    );
}

export default Question;
