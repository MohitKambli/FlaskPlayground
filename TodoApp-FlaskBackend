database.py
from flask_sqlalchemy import SQLAlchemy
db = SQLAlchemy()


models.py
from database import db
from sqlalchemy import ForeignKey

class Todo(db.Model):
    __tablename__ = 'todos'

    tid = db.Column(db.Integer, primary_key=True)
    description = db.Column(db.String, nullable = False)
    completed = db.Column(db.Boolean, default = False)

    def __init__(self, description):
        self.description = description

    def to_dict(self):
        return {
            'tid': self.tid,
            'description': self.description,
            'completed': self.completed
        }

class Person(db.Model):
    __tablename__ = 'people'

    p_id = db.Column(db.Integer, primary_key=True)
    p_name = db.Column(db.String, nullable=False)
    p_age = db.Column(db.Integer)

    def __init__(self, p_name, p_age):
        self.p_name = p_name
        self.p_age = p_age

    def to_dict(self):
        return {
            'ID': self.p_id,
            'Name': self.p_name,
            'Age': self.p_age
        }

class Thing(db.Model):
    __tablename__ = 'things'

    t_id = db.Column(db.Integer, primary_key=True)
    p_id = db.Column(db.Integer, ForeignKey('people.p_id', ondelete="CASCADE"), nullable=False)
    t_name = db.Column(db.String, nullable=False)
    t_price = db.Column(db.Float, nullable=False)
    person = db.relationship("Person", backref=db.backref("things", cascade="all, delete-orphan", passive_deletes=True))

    def __init__(self, t_name, t_price, p_id):
        self.t_name = t_name
        self.t_price = t_price
        self.p_id = p_id

    def to_dict(self):
        return {
            'ID': self.t_id,
            'Name': self.t_name,
            'Price': self.t_price,
            'P_ID': self.p_id
        }


app.py
from flask import Flask, jsonify, request
from flask_cors import CORS
from database import db
from flask_migrate import Migrate
from models import Todo, Person, Thing
import requests
import redis
import json

app = Flask(__name__)
CORS(app)

postgres_db = ''
postgres_user = ''
postgres_password = ''
postres_url = f'postgresql://{postgres_user}:{postgres_password}@localhost:5432/{postgres_db}'
app.config['SQLALCHEMY_DATABASE_URI'] = postres_url

WEATHER_API_KEY = ''

redis_client = redis.Redis(
    host='',
    port=,
    password=''
)

board = [""] * 9
player = 'X'

db.init_app(app)
migrate = Migrate(app, db)

@app.route('/todos', methods = ['GET'])
def get_todos():
    todos = Todo.query.all()
    return jsonify([todo.to_dict() for todo in todos]), 200

@app.route('/todos/add', methods = ['POST'])
def add_todo():
    data = request.json
    new_todo = Todo(data['description'])
    db.session.add(new_todo)
    db.session.commit()
    return jsonify(new_todo.to_dict()), 201

@app.route('/todos/update/<int:todo_id>', methods = ['PUT'])
def update_todo(todo_id):
    data = request.json
    todo = Todo.query.get_or_404(todo_id)
    if 'description' in data:
        todo.description = data['description']
    if 'completed' in data:
        todo.completed = data['completed']
    db.session.commit()
    return jsonify(todo.to_dict()), 200

@app.route('/todos/delete/<int:todo_id>', methods = ['DELETE'])
def delete_todo(todo_id):
    todo = Todo.query.get_or_404(todo_id)
    db.session.delete(todo)
    db.session.commit()
    return jsonify({'message': 'Todo Deleted Sucessfully'}), 200

@app.route('/weather/<city>/<api_key>')
def find_weather(city, api_key):
    cache_key = f"{city}"
    cached_data = redis_client.get(cache_key)
    if cached_data:
        return jsonify(json.loads(cached_data))
    headers = {
        'User-Agent': 'FlaskTest/1.0',
        'Content-Type': 'application/json'
    }
    # url = f'http://api.weatherapi.com/v1/current.json?q={city}&key={WEATHER_API_KEY}'
    url = f'http://api.weatherapi.com/v1/current.json?q={city}&key={api_key}'
    response = requests.get(url, headers = headers)
    redis_client.setex(cache_key, 300, response.text)
    return response.json()

@app.route('/move', methods=['POST'])
def move():
    global board, player
    data = request.json
    position = data['position']

    if board[position] == "":
        board[position] = player
        if board.count("") == 0:
            return jsonify({'board': board, 'player': player, 'message': "Tie"})
        if (
                (board[0] == player and board[1] == player and board[2] == player) or
                (board[3] == player and board[4] == player and board[5] == player) or
                (board[6] == player and board[7] == player and board[8] == player) or
                (board[0] == player and board[3] == player and board[6] == player) or
                (board[1] == player and board[4] == player and board[7] == player) or
                (board[2] == player and board[5] == player and board[8] == player) or
                (board[0] == player and board[4] == player and board[8] == player) or
                (board[2] == player and board[4] == player and board[6] == player)
        ):
            board = [""] * 9
            player = "X"
            return jsonify({'board': board, 'player': player, 'message': "Won"})

        player = "O" if player == "X" else "X"
        return jsonify({'board': board, 'player': player, 'message': "Move made!"})
    else:
        return jsonify({'error': "Invalid move"}), 400

@app.route('/person/add', methods=['POST'])
def add_person():
    try:
        person_data = request.json
        if not person_data or 'p_name' not in person_data or 'p_age' not in person_data:
            return jsonify({'error': 'Invalid request. Name and age are required.'}), 400
        person = Person(p_name=person_data['p_name'], p_age=int(person_data['p_age']))
        db.session.add(person)
        db.session.commit()
        return jsonify({'Person': person.to_dict()}), 201
    except Exception as e:
        return jsonify({'error': str(e)}), 500

@app.route('/person/get_all', methods=['GET'])
def get_all_people():
    people = Person.query.all()
    return jsonify({'People': [person.to_dict() for person in people]}), 200

@app.route('/person/update/<int:p_id>', methods=['PUT'])
def update_person(p_id):
    person_data = request.json
    person = Person.query.get_or_404(p_id)
    if 'p_name' in person_data:
        person.p_name = person_data['p_name']
    if 'p_age' in person_data:
        person.p_age = person_data['p_age']
    db.session.commit()
    return jsonify({"Person": person.to_dict()}), 200

@app.route('/person/delete/<int:p_id>', methods=['DELETE'])
def delete_person(p_id):
    person = Person.query.get(p_id)
    db.session.delete(person)
    db.session.commit()
    return jsonify({"Message": "Person Deleted Successfully"})

@app.route('/thing/add', methods=['POST'])
def add_thing():
    try:
        thing_data = request.json
        if not thing_data or 't_name' not in thing_data or 't_price' not in thing_data or 'p_id' not in thing_data:
            return jsonify({'error': 'Invalid request. Name, price, and person ID are required.'}), 400
        person = Person.query.get(thing_data['p_id'])
        if not person:
            return jsonify({'error': f'Person with ID {thing_data["p_id"]} does not exist.'}), 404
        thing = Thing(t_name=thing_data['t_name'], t_price=float(thing_data['t_price']), p_id=int(thing_data['p_id']))
        db.session.add(thing)
        db.session.commit()
        return jsonify({'Thing': thing.to_dict()}), 201
    except Exception as e:
        return jsonify({'error': str(e)}), 500

@app.route('/thing/get_all', methods=['GET'])
def get_all_things():
    things = Thing.query.all()
    return jsonify({'Things': [thing.to_dict() for thing in things]}), 200

@app.route('/thing/update/<int:t_id>', methods=['PUT'])
def update_thing(t_id):
    thing_data = request.json
    thing = Thing.query.get_or_404(t_id)
    if 't_name' in thing_data:
        thing.t_name = thing_data['t_name']
    if 't_price' in thing_data:
        thing.t_price = float(thing_data['t_price'])
    if 'p_id' in thing_data:
        thing.p_id = int(thing_data['p_id'])
    db.session.commit()
    return jsonify({'Thing': thing.to_dict()}), 200

@app.route('/thing/delete/<int:t_id>', methods=['DELETE'])
def delete_thing(t_id):
    thing = Thing.query.get(t_id)
    db.session.delete(thing)
    db.session.commit()
    return jsonify({"Message": "Thing Deleted Successfully"})

if __name__ == '__main__':
    app.run(debug = True)
