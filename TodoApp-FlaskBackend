database.py
from flask_sqlalchemy import SQLAlchemy
db = SQLAlchemy()


models.py
from database import db
class Todo(db.Model):
    __tablename__ = 'todos'
    tid = db.Column(db.Integer, primary_key = True)
    description = db.Column(db.String, nullable = False)
    completed = db.Column(db.Boolean, default = False)

    def __init__(self, description):
        self.description = description

    def to_dict(self):
        return {
            'tid': self.tid,
            'description': self.description,
            'completed': self.completed
        }


app.py
from flask import Flask, jsonify, request
from flask_cors import CORS
from database import db
from flask_migrate import Migrate
from models import Todo
import requests
import redis
import json

app = Flask(__name__)
CORS(app)

postgres_db = 'postgres'
postgres_user = 'postgres'
postgres_password = 'Euphie017119#'
postres_url = f'postgresql://{postgres_user}:{postgres_password}@localhost:5432/{postgres_db}'
app.config['SQLALCHEMY_DATABASE_URI'] = postres_url

WEATHER_API_KEY = '98037c962893437c82c34421240512'

redis_client = redis.Redis(
    host='redis-12367.c281.us-east-1-2.ec2.redns.redis-cloud.com',
    port=12367,
    password='cniChB2L7FwQ0zSchvzixuXZorJQaZmM'
)

board = [""] * 9
player = 'X'

db.init_app(app)
migrate = Migrate(app, db)

@app.route('/todos', methods = ['GET'])
def get_todos():
    todos = Todo.query.all()
    return jsonify([todo.to_dict() for todo in todos]), 200

@app.route('/todos/add', methods = ['POST'])
def add_todo():
    data = request.json
    new_todo = Todo(data['description'])
    db.session.add(new_todo)
    db.session.commit()
    return jsonify(new_todo.to_dict()), 201

@app.route('/todos/update/<int:todo_id>', methods = ['PUT'])
def update_todo(todo_id):
    data = request.json
    todo = Todo.query.get_or_404(todo_id)
    if 'description' in data:
        todo.description = data['description']
    if 'completed' in data:
        todo.completed = data['completed']
    db.session.commit()
    return jsonify(todo.to_dict()), 200

@app.route('/todos/delete/<int:todo_id>', methods = ['DELETE'])
def delete_todo(todo_id):
    todo = Todo.query.get_or_404(todo_id)
    db.session.delete(todo)
    db.session.commit()
    return jsonify({'message': 'Todo Deleted Sucessfully'}), 200

@app.route('/weather/<city>/<api_key>')
def find_weather(city, api_key):
    cache_key = f"{city}"
    cached_data = redis_client.get(cache_key)
    if cached_data:
        return jsonify(json.loads(cached_data))
    headers = {
        'User-Agent': 'FlaskTest/1.0',
        'Content-Type': 'application/json'
    }
    # url = f'http://api.weatherapi.com/v1/current.json?q={city}&key={WEATHER_API_KEY}'
    url = f'http://api.weatherapi.com/v1/current.json?q={city}&key={api_key}'
    response = requests.get(url, headers = headers)
    redis_client.setex(cache_key, 300, response.text)
    return response.json()

@app.route('/move', methods=['POST'])
def move():
    global board, player
    data = request.json
    position = data['position']

    if board[position] == "":
        board[position] = player
        if board.count("") == 0:
            return jsonify({'board': board, 'player': player, 'message': "Tie"})
        if (
                (board[0] == player and board[1] == player and board[2] == player) or
                (board[3] == player and board[4] == player and board[5] == player) or
                (board[6] == player and board[7] == player and board[8] == player) or
                (board[0] == player and board[3] == player and board[6] == player) or
                (board[1] == player and board[4] == player and board[7] == player) or
                (board[2] == player and board[5] == player and board[8] == player) or
                (board[0] == player and board[4] == player and board[8] == player) or
                (board[2] == player and board[4] == player and board[6] == player)
        ):
            board = [""] * 9
            player = "X"
            return jsonify({'board': board, 'player': player, 'message': "Won"})

        player = "O" if player == "X" else "X"
        return jsonify({'board': board, 'player': player, 'message': "Move made!"})
    else:
        return jsonify({'error': "Invalid move"}), 400


if __name__ == '__main__':
    app.run(debug = True)
