database.py
from flask_sqlalchemy import SQLAlchemy
db = SQLAlchemy()


models.py
from database import db
class Todo(db.Model):
    __tablename__ = 'todos'
    tid = db.Column(db.Integer, primary_key = True)
    description = db.Column(db.String, nullable = False)
    completed = db.Column(db.Boolean, default = False)

    def __init__(self, description):
        self.description = description

    def to_dict(self):
        return {
            'tid': self.tid,
            'description': self.description,
            'completed': self.completed
        }


app.py
from flask import Flask, jsonify, request
from flask_cors import CORS
from flask_migrate import Migrate
from database import db
from models import Todo
import requests

app = Flask(__name__)
CORS(app)

# PostgreSQL Database Configuration
postgres_db = ''
postgres_user = ''
postgres_password = ''
postgres_url = f'postgresql://{postgres_user}:{postgres_password}@localhost:5432/{postgres_db}'
app.config['SQLALCHEMY_DATABASE_URI'] = postgres_url
app.config["SQLALCHEMY_TRACK_MODIFICATIONS"] = False

# Initialize SQLAlchemy and Flask-Migrate
db.init_app(app)
migrate = Migrate(app, db)  # Enable migrations

# Routes

@app.route('/todos', methods=['GET'])
def get_todos():
    todos = Todo.query.all()
    return jsonify([todo.to_dict() for todo in todos]), 200

@app.route('/todos/add', methods=['POST'])
def add_todo():
    data = request.json
    new_todo = Todo(description=data['description'])
    db.session.add(new_todo)
    db.session.commit()
    return jsonify(new_todo.to_dict()), 201

@app.route('/todos/update/<int:todo_id>', methods=['PUT'])
def update_todo(todo_id):
    data = request.json
    todo = Todo.query.get_or_404(todo_id)
    if 'description' in data:
        todo.description = data['description']
    if 'completed' in data:
        todo.completed = data['completed']
    db.session.commit()
    return jsonify(todo.to_dict()), 200

@app.route('/todos/delete/<int:todo_id>', methods=['DELETE'])
def delete_todo(todo_id):
    todo = Todo.query.get_or_404(todo_id)
    db.session.delete(todo)
    db.session.commit()
    return jsonify({'message': 'Todo Deleted Successfully'}), 200

@app.route('/')
def index():
    headers = {
        'User-Agent': 'FlaskTest/1.0',
        'Content-Type': 'application/json'
    }
    url = 'https://jsonplaceholder.typicode.com/posts'
    response = requests.get(url, headers=headers)
    response.raise_for_status()
    data = response.json()
    return data

@app.route('/add/<int:a>/<int:b>')
def add(a, b):
    return f'{a + b}'

if __name__ == '__main__':
    app.run(debug=True)
