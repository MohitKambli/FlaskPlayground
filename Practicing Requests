import os
from dotenv import load_dotenv
load_dotenv()
import requests
import pandas as pd
from datetime import datetime

'''
url = 'https://jsonplaceholder.typicode.com/posts'
try:
    response = requests.get(url)
    response.raise_for_status()
    data = response.json()
except Exception as e:
    print('Error: ', e)
    data = []

if data:
    df = pd.DataFrame(data)
    df = df.set_index('id')
    print(df.head())
else:
    print('No Data Found')
'''

'''
url = 'https://catfact.ninja/fact'
try:
    response = requests.get(url)
    response.raise_for_status()
    data = response.json()
except Exception as e:
    print('Error: ', e)
    data = []

if data:
    print("Fact: ", data['fact'])
    print("Length: ", data['length'])
else:
    print('Data Not Found')
'''

'''
url = "https://api.coindesk.com/v1/bpi/currentprice.json"
try:
    response = requests.get(url)
    response.raise_for_status()
    data = response.json()
except Exception as e:
    print('Error: ', e)
    data = []

if data:
    bpi_data = data['bpi']
    keys = []
    for key in bpi_data:
        keys.append(key)
    values = []
    for key in keys:
        values.append(bpi_data[key])
    df = pd.DataFrame(values)
    df = df.set_index('code')
    print(df)
else:
    print('No Data Found')
'''

'''
url = "https://api.agify.io?name=meelad"
try:
    response = requests.get(url)
    response.raise_for_status()
    data = response.json()
except Exception as e:
    print('Error: ', e)
    data = []

if data:
    arr = []
    arr.append(data)
    df = pd.DataFrame(arr)
    df['id'] = range(1, len(df) + 1)
    df = df.set_index('id')
    print(df)
else:
    print('Data Not Found')
'''

'''
url = 'https://api.genderize.io?name=luc'
try:
    response = requests.get(url)
    response.raise_for_status()
    data = response.json()
except Exception as e:
    print("Exception: ", e)
    data = []

if data:
    print(data)
else:
    print('No Data Found')
'''

'''
url = 'https://datausa.io/api/data?drilldowns=Nation&measures=Population'
try:
    response = requests.get(url)
    response.raise_for_status()
    data = response.json()
except Exception as e:
    print("Exception: ", e)
    data = []

if data:
    df = pd.DataFrame([data['source'][0]['annotations']])
    df['id'] = range(1, len(df) + 1)
    df = df.set_index('id')
    print(df)
else:
    print('No Data Found')
'''

'''
from sqlalchemy import create_engine, ForeignKey, Column, String, Integer, CHAR
from sqlalchemy.ext.declarative import declarative_base
from sqlalchemy.orm import sessionmaker

Base = declarative_base()

class Person(Base):
    __tablename__ = 'people'

    ssn = Column("ssn", Integer, primary_key=True)
    first_name = Column("first_name", String)
    last_name = Column("last_name", String)
    gender = Column("gender", CHAR)
    age = Column("age", Integer)

    def __init__(self, ssn, first_name, last_name, gender, age):
        self.ssn = ssn
        self.first_name = first_name
        self.last_name = last_name
        self.gender = gender
        self.age = age

    def __repr__(self):
        return f"({self.ssn}) {self.first_name} {self.last_name} ({self.gender}, {self.age})"

class Thing(Base):
    __tablename__ = 'things'

    tid = Column('tid', Integer, primary_key=True)
    description = Column('description', String)
    owner = Column(Integer, ForeignKey('people.ssn'))

    def __init__(self, tid, description, owner):
        self.tid = tid
        self.description = description
        self.owner = owner
    def __repr__(self):
        return f"({self.tid}) {self.description} owned by ({self.owner})"


postgres_url = 'sqlite:///./testdb.db'
engine = create_engine(postgres_url, echo=True)
Base.metadata.create_all(bind = engine)

Session = sessionmaker(bind=engine)
session = Session()

p1 = Person(12312, 'Mohit', 'Kambli', 'M', 27)
p2 = Person(12313, 'Hrishikesh', 'Anerao', 'M', 27)
p3 = Person(12314, 'Ameya', 'Kale', 'M', 26)

session.add(p1)
session.add(p2)
session.add(p3)
session.commit()

t1 = Thing(1, 'Car', p1.ssn)
t2 = Thing(2, 'Laptop', p1.ssn)
t3 = Thing(3, 'PS5', p2.ssn)
t4 = Thing(4, 'Tool', p3.ssn)
t5 = Thing(5, 'Book', p3.ssn)
session.add(t1)
session.add(t2)
session.add(t3)
session.add(t4)
session.add(t5)
session.commit()

people = session.query(Person).all()
print(people)

results = session.query(Person).filter(Person.last_name == 'Anerao')
for result in results:
    print(result)

age_results = session.query(Person).filter(Person.age > 26)
for result in age_results:
    print(result)

in_results = session.query(Person).filter(Person.first_name.in_(['Mohit', 'Hrishikesh']))
for result in in_results:
    print(result)

complex_results = session.query(Thing, Person).filter(Thing.owner == Person.ssn).filter(Person.first_name == 'Mohit').all()
for result in complex_results:
    print(result)
'''

'''
import requests
import pandas as pd
import os
from dotenv import load_dotenv
load_dotenv()

url = "http://api.weatherapi.com/v1"
weather_api_key = os.getenv('WEATHER_API_KEY')
headers = {
    "User-Agent": "Test/1.0",
    "Accept": "application/json"
}

try:
    response = requests.get(url + f'/current.json?key={weather_api_key}&q=Syracuse', headers=headers)
    print("Status Code:", response.status_code)
    response.raise_for_status()
    data = response.json()
except Exception as e:
    print("Request Exception:", e)
    data = []

if data:
    print(data)
else:
    print("No Data Found")
'''

'''
#url = 'https://api.chess.com/pub/player/hikaru'
#url = 'https://api.chess.com/pub/streamers'
#url = 'https://api.chess.com/pub/player/hikaru/games/2023/12'
url = 'https://api.chess.com/pub/player/hikaru/stats'
headers = {
    'User-Agent': 'Test/1.0',
    'Accept' : 'application/json',
    'Content-Type' : 'application/json'
}
try:
    response = requests.get(url, headers = headers)
    response.raise_for_status()
    data = response.json()
except Exception as e:
    print('Error: ', e)
    data = []

if data:
    # Solution
    games = data['games']
    opponents = []
    for game in games:
        cell = []
        if game['white']['username'] == 'hikaru':
            cell.append(game['black']['result'])
            cell.append(game['black']['username'])
        else:
            cell.append(game['white']['result'])
            cell.append(game['white']['username'])
        opponents.append(cell)
    opponents.sort(key=lambda x: x[1], reverse=True)
    print(opponents)


    # Solution
    record = data['chess_daily']['record']
    win = record['win']
    loss = record['loss']
    draw = record['draw']
    total = win + loss + draw
    print(f"Win: {((win * 100) / total)}%")
    print(f"Loss: {((loss * 100) / total)}%")
    print(f"Draw: {((draw * 100) / total)}%")

else:
    print('No Data Found')
'''

'''
omdb_api_key = os.getenv('OMDB_API_KEY')
url = f'http://www.omdbapi.com/?t=Mission+Impossible&apikey={omdb_api_key}'
headers = {
    "User-Agent": "Test/1.0",
    'Content-Type': 'application/json'
}

try:
    response = requests.get(url, headers=headers)
    response.raise_for_status()
    data = response.json()
except Exception as e:
    print('Exception: ', e)
    data = []

if data:
    df = pd.DataFrame(data['Ratings'])
    df['id'] = range(1, len(df)+1)
    df = df.set_index('id')
    print(df)
else:
    print('No Data Found')
'''

'''
url = 'https://api.chess.com/pub/club/chess-com-developer-community/members'
headers = {
    'User-Agent': 'Test/1.0',
    'Content-Type': 'application/json'
}
try:
    response = requests.get(url, headers = headers)
    response.raise_for_status()
    data = response.json()
except Exception as e:
    print('Exception: e')
    data = []
if data:
    user_names = []
    weekly_data = data['weekly']
    ans = []
    for entry in weekly_data:
        user_name = entry['username']
        row = []
        url_2 = f'https://api.chess.com/pub/player/{user_name}/stats'
        try:
            response = requests.get(url_2, headers=headers)
            response.raise_for_status()
            data = response.json()
            row.append(user_name)
            row.append(data['chess_daily']['best']['rating'])
            ans.append(row)
        except Exception as e:
            print('Exception: ', e)
            data = []
else:
    print('No Data Found')

ans.sort(key = lambda x : x[1])
print(ans)
'''

'''
url = 'https://api.chess.com/pub/leaderboards'
headers = {
    'User-Agent': 'Test/1.0',
    'Content-Type': 'application/json',
    'Accept': 'application/json'
}
try:
    response = requests.get(url, headers=headers)
    response.raise_for_status()
    data = response.json()
except Exception as e:
    print('Exception: ', e)
    data = []

if data:
    daily_data = data['daily']
    df = pd.DataFrame(daily_data)
    ans_1_df = df[['score', 'draw_count', 'win_count']].copy()
    ans_1_df.sort_values(['score', 'draw_count'], ascending=[True, False], inplace=True)
    print(ans_1_df)

    final_data = []
    for obj in daily_data:
        final_data.append([obj['score'], obj['draw_count'], obj['win_count']])
    final_data.sort(key=lambda x: (x[0], -x[1]))
    print(final_data)

else:
    print('Data Not Found')
'''

'''
url = 'https://api.chess.com/pub/player/hikaru'
headers = {
    'User-Agent': 'Test/1.0',
    'Content-Type': 'application/json'
}

try:
    response = requests.get(url, headers=headers)
    response.raise_for_status()
    data = response.json()
except Exception as e:
    print("Exception: ", e)
    data = []

if data:
    df = pd.DataFrame(data)
    ans = df[['username','name','location','title', 'followers']]
    print(ans)
else:
    print('No Data Found')
'''

'''
url = 'https://api.chess.com/pub/player/erik/stats'
headers = {
    'User-Agent': 'Test/1.0',
    'Content-Type':'application.json'
}
try:
    response = requests.get(url, headers=headers)
    response.raise_for_status()
    data = response.json()
except Exception as e:
    print('Error: ',e)

if data:
    count = 0
    for key in data:
        if type(data[key]) == dict and 'record' in data[key]:
            count += data[key]['record']['win'] + data[key]['record']['draw'] + data[key]['record']['loss']
    print(f'Count: {count}')
else:
    print('No Data Found')
'''

'''
url = 'https://api.chess.com/pub/leaderboards'
headers = {
    'User-Agent': 'Task/1.0',
    'Content-Type': 'application/json'
}

try:
    response = requests.get(url, headers = headers)
    response.raise_for_status()
    data = response.json()
except Exception as e:
    print('Exception: ', e)
    data = []

if data:
    blitz_data = data['live_blitz']
    ans = []
    for i in range(min(10, len(blitz_data))):
        ans.append([blitz_data[i]['username'], blitz_data[i]['name'], blitz_data[i]['score'], blitz_data[i]['title'], blitz_data[i]['rank']])
    df = pd.DataFrame(ans)
    df.columns = ['username', 'name', 'score', 'title', 'rank']
    print(df)

else:
    print('No Data Found')
'''

'''
url = 'https://api.chess.com/pub/club/chess-com-developer-community/members'
headers = {
    'Content-Type': 'application/json',
    'User-Agent': 'Test/1.0'
}

try:
    response = requests.get(url, headers=headers)
    response.raise_for_status()
    data = response.json()
except Exception as e:
    print(f'Error: {e}')
    data = []

if data:
    weekly_data = data['weekly']
    df = pd.DataFrame(weekly_data)
    print(df['username'])
else:
    print('No Data Found')
'''

'''
url = 'https://api.chess.com/pub/player/hikaru/games'
headers = {
    'Content-Type': 'application/json',
    'User-Agent': 'Test/1.0'
}
try:
    response = requests.get(url, headers=headers)
    response.raise_for_status()
    data = response.json()
except Exception as e:
    print(f'Exception: {e}')
    data = []

if data:
    games_data = data['games']
    ans = []
    for game in games_data:
        if game['time_class'] == 'daily':
            ans.append(game)
    print(ans)
else:
    print('No Data Found')
'''

'''
url = 'https://api.chess.com/pub/player/hikaru/matches'
headers = {
    'Content-Type': 'application/json',
    'User-Agent': 'Test/1.0'
}

try:
    response = requests.get(url, headers=headers)
    response.raise_for_status()
    data = response.json()
except Exception as e:
    print(f'Exception: {e}')
    data = []

if data:
    finished_data = data['finished']
    black, white = 0, 0
    for entry in finished_data:
        if entry['results']['played_as_white'] == 'win':
            white += 1
        if entry['results']['played_as_black'] == 'win':
            black += 1
    try:
        print(f'White Win Rate: {(white/(white + black)) * 100}')
        print(f'Black Win Rate: {(black/(white + black)) * 100}')
    except ZeroDivisionError as e:
        print('No Matches Won With Either Black Or White')
else:
    print('No Data Found')
'''

'''
url_1 = 'https://api.chess.com/pub/player/erik/games/2023/01'
url_2 = 'https://api.chess.com/pub/player/erik/games/2024/01'
headers = {
    'User-Agent': 'Test/1.0',
    'Content-Type': 'application.json',
    'Accept': 'application/json'
}

date_obj = datetime.fromtimestamp(1704139243)
print(date_obj)
print(date_obj.day)
print(date_obj.month)
print(date_obj.year)

try:
    response_1 = requests.get(url_1, headers=headers)
    response_1.raise_for_status()
    data_1 = response_1.json()
except Exception as e:
    print(f'Exception: {e}')
    data_1 = []

try:
    response_2 = requests.get(url_2, headers=headers)
    response_2.raise_for_status()
    data_2 = response_2.json()
except Exception as e:
    print(f'Exception: {e}')
    data_2 = []

# ans = []
# ids = [obj['uuid'] for obj in data_1['games']]
# if data_1 and data_2:
#     for obj in data_2['games']:
#         if obj['uuid'] not in ids:
#             ans.append(obj)
# print(len(data_1['games']), len(data_2['games']), len(ans))
'''

'''
months = ['01','02','03','04','05','06','07','08','09','10','11','12']
username = 'erik'
url = f'https://api.chess.com/pub/player/{username}/games/2024'
headers = {
    'User-Agent': 'Test/1.0',
    'Content-Type': '*/*'
}
wins, defeats, total_games = 0, 0, 0
try:
    for month in months:
        response = requests.get(f'{url}/{month}', headers=headers)
        response.raise_for_status()
        data = response.json()
        for game in data['games']:
            if (username == game['white']['username'] and game['white']['result'] == 'win') or (username == game['black']['username'] and game['black']['result'] == 'win'):
                wins += 1
        for game in data['games']:
            if (username == game['white']['username'] and game['black']['result'] == 'win') or (username == game['black']['username'] and game['white']['result'] == 'win'):
                defeats += 1
            total_games += 1
    stats = {'Wins': wins, 'Defeats': defeats, 'Draws': total_games - (wins + defeats)}
    df = pd.DataFrame([stats])
    print(df)

except Exception as e:
    print('Exception: ', e)
    data = []
'''

'''
arr = [[20,30,40]]
df = pd.DataFrame(arr, columns=['Wins', 'Defeats', 'Draws'])
print(df)
'''

'''
months = ['01','02','03','04','05','06','07','08','09','10','11','12']
username = 'erik'
url = f'https://api.chess.com/pub/player/{username}/games/2024'
headers = {
    'User-Agent': 'Test/1.0',
    'Content-Type': '*/*'
}
opponents_competing_count = {}
try:
    for month in months:
        response = requests.get(f'{url}/{month}', headers=headers)
        response.raise_for_status()
        data = response.json()
        for game in data['games']:
            if username == game['white']['username']:
                opponent = game['black']['username']
                if opponent not in opponents_competing_count:
                    opponents_competing_count[opponent] = 0
                opponents_competing_count[opponent] += 1
    sorted_opponents_competing_count = dict(sorted(opponents_competing_count.items(), key=lambda x: x[1], reverse=True))
    temp = []
    for item in sorted_opponents_competing_count.items():
        temp.append(item)
    df = pd.DataFrame(temp, columns=['usernames', 'count'])
    print(df.head(5))

except Exception as e:
    print('Exception: ', e)
    data = []
'''

'''
url = 'https://www.chess.com/openings/Three-Knights-Opening-Winawer-Defense'
print(url.split('openings/')[1])
'''

'''
headers = {
    'User-Agent': 'Test/1.0',
    'Content=Type': 'application/json'
}
username = 'erik'
url = f'https://api.chess.com/pub/player/{username}/games/2024/01'
try:
    response = requests.get(url, headers=headers)
    response.raise_for_status()
    data = response.json()
except Exception as e:
    print('Exception: ', e)
    data = []
if data:
    games = data['games']
    pgn = []
    all_moves = []
    for game in games:
        pgn_data = game['pgn']
        lines = pgn_data.splitlines()
        pgn_map = {}
        for line in lines:
            if line.startswith('[') and line.endswith(']'):
                key, value = line[1:-1].split(" ", 1)
                pgn_map[key] = value.strip('"')
        pgn.append(pgn_map)
        is_move_line = False
        moves = []
        for line in lines:
            if line == "":
                is_move_line = True
                continue
            if is_move_line:
                moves.append(line)
        moves = " ".join(moves)
        moves = moves.split(" ")
        white_moves = []
        black_moves = []
        white, black = True, False
        for move in moves:
            if not move.startswith('{') and not move.endswith('}') and '.' not in move:
                if white:
                    white_moves.append(move)
                    white = False
                    black = True
                elif black:
                    black_moves.append(move)
                    white = True
                    black = False
        all_moves.append({'White: ': white_moves, 'Black': black_moves})
    print(pgn)
    print(all_moves)
'''
